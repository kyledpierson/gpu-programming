#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include "string.h"
#include "cuda.h"
#include <complex.h>

#define DEFAULT_FILENAME "mountains.ppm"

void* memCheck(void* mem) {
    // Make sure memory is allocated
    if (!mem) {
        fprintf(stderr, "Unable to allocate bytes\n");
        exit(-1);
    }
    return mem;
}

unsigned int *read_ppm(char *filename, int & xsize, int & ysize, int & maxval) {
    if (!filename || filename[0] == '\0') {
        fprintf(stderr, "read_ppm but no file name\n");
        return NULL;  // fail
    }

    fprintf(stderr, "read_ppm( %s )\n", filename);
    int fd = open( filename, O_RDONLY);
    if (fd == -1) {
        fprintf(stderr, "read_ppm()    ERROR  file '%s' cannot be opened for reading\n", filename);
        return NULL; // fail
    }

    char chars[1024];
    int num = read(fd, chars, 1000);

    if (chars[0] != 'P' || chars[1] != '6') {
        fprintf(stderr, "Texture::Texture()    ERROR  file '%s' does not start with \"P6\"  I am expecting a binary PPM file\n", filename);
        return NULL;
    }

    unsigned int width, height, maxvalue;
    char *ptr = chars+3; // P 6 newline
    if (*ptr == '#') { // comment line!
        ptr = 1 + strstr(ptr, "\n");
    }

    num = sscanf(ptr, "%d\n%d\n%d",  &width, &height, &maxvalue);
    fprintf(stderr, "read %d things   width %d  height %d  maxval %d\n", num, width, height, maxvalue);
    xsize = width;
    ysize = height;
    maxval = maxvalue;

    unsigned int *pic = (unsigned int *) memCheck(malloc( width * height * sizeof(unsigned int)));

    // allocate buffer to read the rest of the file into
    int bufsize =  3 * width * height * sizeof(unsigned char);
    if (maxval > 255) bufsize *= 2;
    unsigned char *buf = (unsigned char *) memCheck(malloc(bufsize));

    // TODO really read
    char duh[80];
    char *line = chars;

    // find the start of the pixel data.   no doubt stupid
    sprintf(duh, "%d\0", xsize);
    line = strstr(line, duh);
    //fprintf(stderr, "%s found at offset %d\n", duh, line-chars);
    line += strlen(duh) + 1;

    sprintf(duh, "%d\0", ysize);
    line = strstr(line, duh);
    //fprintf(stderr, "%s found at offset %d\n", duh, line-chars);
    line += strlen(duh) + 1;

    sprintf(duh, "%d\0", maxval);
    line = strstr(line, duh);

    fprintf(stderr, "%s found at offset %d\n", duh, line - chars);
    line += strlen(duh) + 1;

    long offset = line - chars;
    lseek(fd, offset, SEEK_SET); // move to the correct offset
    long numread = read(fd, buf, bufsize);
    fprintf(stderr, "Texture %s   read %ld of %ld bytes\n", filename, numread, bufsize);

    close(fd);

    int pixels = xsize * ysize;
    for (int i=0; i<pixels; i++) pic[i] = (int) buf[3*i];  // red channel

    return pic; // success
}

void write_ppm(char *filename, int xsize, int ysize, int maxval, int *pic) {
    FILE *fp;

    fp = fopen(filename, "w");
    if (!fp) {
        fprintf(stderr, "FAILED TO OPEN FILE '%s' for writing\n");
        exit(-1);
    }
    // int x,y;

    fprintf(fp, "P6\n");
    fprintf(fp,"%d %d\n%d\n", xsize, ysize, maxval);

    int numpix = xsize * ysize;
    for (int i=0; i<numpix; i++) {
        unsigned char uc = (unsigned char) pic[i];
        fprintf(fp, "%c%c%c", uc, uc, uc);
    }
    fclose(fp);
}

// ============================== CONVOLUTION ==============================
__device__ float conv_pixel(unsigned int tile[32][32], float filter[7][7], int y, int x) {
    float value = 0;

    for (int i = 0; i < 7; i++) {
        for (int j = 0; j < 7; j++) {
            value += tile[y-3+i][x-3+j]*filter[6-i][6-j];
        }
    }

    return value;
}

__global__ void conv(unsigned int *image, int *result, int xsize) {
    // Shared memory tile for image data
    __shared__ unsigned int tile[32][32];

    // Filter with which to convolve the image
    float gaussian[7][7] = {
        {0.00000019425474,  0.000096568274, 0.00010062644,  0.00021978836,  0.00010062644,  0.000096568274, 0.00000019425474},
        {0.0000096568274,	0.00048006195,	0.0050023603,	0.010926159,	0.0050023603,	0.00048006195,	0.0000096568274},
        {0.00010062644,     0.0050023603,	0.052125789,    0.11385319,	    0.052125789,	0.0050023603,	0.00010062644},
        {0.00021978836,     0.010926159,	0.11385319,	    0.24867822,	    0.11385319,	    0.010926159,    0.00021978836},
        {0.00010062644,     0.0050023603,	0.052125789,    0.11385319,	    0.052125789,	0.0050023603,	0.00010062644},
        {0.0000096568274,	0.00048006195,	0.0050023603,	0.010926159,	0.0050023603,	0.00048006195,	0.0000096568274},
        {0.00000019425474,  0.000096568274, 0.00010062644,  0.00021978836,  0.00010062644,  0.000096568274, 0.00000019425474},
    };

    int y = threadIdx.y;
    int x = threadIdx.x;

    int min_y = blockIdx.y*(blockDim.y-6);
    int min_x = blockIdx.x*(blockDim.x-6);

    // Load into shared memory
    tile[y][x] = image[(min_y+y)*xsize + (min_x+x)];

    // Sync the threads
    __syncthreads();

    // Each interior thread computes sobel
    if (y>2 && y<blockDim.y-3 && x>2 && x<blockDim.x-3) {
        result[(min_y+y)*xsize + (min_x+x)] = conv_pixel(tile, gaussian, y, x);
    }
}

// ============================== MAIN ==============================
int main(int argc, char **argv) {
    /*
    float complex morlet1[7][7] = {
        {0.0000050278-0.0000066992*I,-0.0000830900+0.0004709791*I,-0.0043360960-0.0034702790*I,0.0088283160+0.0000000000*I,-0.0043360960+0.0034702790*I,-0.0000830900-0.0004709791*I,0.0000050278+0.0000066992*I},
        {0.0000133504-0.0000177885*I,-0.0002206299+0.0012505970*I,-0.0115136900-0.0092146750*I,0.0234419400+0.0000000000*I,-0.0115136900+0.0092146750*I,-0.0002206299-0.0012505970*I,0.0000133504+0.0000177885*I},
        {0.0000239863-0.0000319602*I,-0.0003964000+0.0022469160*I,-0.0206863600-0.0165557700*I,0.0421175400+0.0000000000*I,-0.0206863600+0.0165557700*I,-0.0003964000-0.0022469160*I,0.0000239863+0.0000319602*I},
        {0.0000291599-0.0000388537*I,-0.0004818999+0.0027315550*I,-0.0251482100-0.0201267000*I,0.0512019100+0.0000000000*I,-0.0251482100+0.0201267000*I,-0.0004818999-0.0027315550*I,0.0000291599+0.0000388537*I},
        {0.0000239863-0.0000319602*I,-0.0003964000+0.0022469160*I,-0.0206863600-0.0165557700*I,0.0421175400+0.0000000000*I,-0.0206863600+0.0165557700*I,-0.0003964000-0.0022469160*I,0.0000239863+0.0000319602*I},
        {0.0000133504-0.0000177885*I,-0.0002206299+0.0012505970*I,-0.0115136900-0.0092146750*I,0.0234419400+0.0000000000*I,-0.0115136900+0.0092146750*I,-0.0002206299-0.0012505970*I,0.0000133504+0.0000177885*I},
        {0.0000050278-0.0000066992*I,-0.0000830900+0.0004709791*I,-0.0043360960-0.0034702790*I,0.0088283160+0.0000000000*I,-0.0043360960+0.0034702790*I,-0.0000830900-0.0004709791*I,0.0000050278+0.0000066992*I},
    };

    float complex morlet2[7][7] = {
        {-0.0000002623-0.0000000428*I,0.0000138724-0.0000178732*I,-0.0000014291+0.0007025404*I,-0.0053326850-0.0020938190*I,0.0059336590-0.0043148570*I,-0.0009152358+0.0036726160*I,-0.0003730507-0.0002492096*I},
        {-0.0000020339-0.0000028530*I,0.0001958448+0.0000299994*I,-0.0036912840+0.0032713350*I,-0.0081006680-0.0196504100*I,0.0175430200+0.0084178570*I,-0.0065653990+0.0036563050*I,-0.0000723519-0.0004640453*I},
        {0.0000061847-0.0000236379*I,0.0004391283+0.0010866160*I,-0.0180811300-0.0009752251*I,0.0211026300-0.0368138100*I,0.0042756350+0.0338953400*I,-0.0074747080-0.0020332880*I,0.0001938181-0.0001894189*I},
        {0.0000950236-0.0000291199*I,-0.0020087690+0.0036050660*I,-0.0229593200-0.0254904200*I,0.0515590200-0.0000000000*I,-0.0229593200+0.0254904200*I,-0.0020087690-0.0036050660*I,0.0000950236+0.0000291199*I},
        {0.0001938181+0.0001894189*I,-0.0074747080+0.0020332880*I,0.0042756350-0.0338953400*I,0.0211026300+0.0368138100*I,-0.0180811300+0.0009752251*I,0.0004391283-0.0010866160*I,0.0000061847+0.0000236379*I},
        {-0.0000723519+0.0004640453*I,-0.0065653990-0.0036563050*I,0.0175430200-0.0084178570*I,-0.0081006680+0.0196504100*I,-0.0036912840-0.0032713350*I,0.0001958448-0.0000299994*I,-0.0000020339+0.0000028530*I},
        {-0.0003730507+0.0002492096*I,-0.0009152358-0.0036726160*I,0.0059336590+0.0043148570*I,-0.0053326850+0.0020938190*I,-0.0000014291-0.0007025404*I,0.0000138724+0.0000178732*I,-0.0000002623+0.0000000428*I},
    };

    float complex morlet3[7][7] = {
        {-0.0000000492+0.0000000263*I,-0.0000020442-0.0000028757*I,0.0000613224-0.0000302072*I,0.0000835564+0.0007363237*I,-0.0031549480+0.0005174061*I,-0.0009821461-0.0036447700*I,0.0015283200+0.0000000000*I},
        {-0.0000020442-0.0000028757*I,0.0000906287-0.0000446434*I,0.0001825038+0.0016082790*I,-0.0101843000+0.0016702070*I,-0.0046855570-0.0173882200*I,0.0107757100+0.0000000000*I,-0.0009821461+0.0036447700*I},
        {0.0000613224-0.0000302072*I,0.0001825038+0.0016082790*I,-0.0150514100+0.0024684060*I,-0.0102342000-0.0379793800*I,0.0347844100+0.0000000000*I,-0.0046855570+0.0173882200*I,-0.0031549480-0.0005174061*I},
        {0.0000835564+0.0007363237*I,-0.0101843000+0.0016702070*I,-0.0102342000-0.0379793800*I,0.0514080300-0.0000000000*I,-0.0102342000+0.0379793800*I,-0.0101843000-0.0016702070*I,0.0000835564-0.0007363237*I},
        {-0.0031549480+0.0005174061*I,-0.0046855570-0.0173882200*I,0.0347844100-0.0000000000*I,-0.0102342000+0.0379793800*I,-0.0150514100-0.0024684060*I,0.0001825038-0.0016082790*I,0.0000613224+0.0000302072*I},
        {-0.0009821461-0.0036447700*I,0.0107757100-0.0000000000*I,-0.0046855570+0.0173882200*I,-0.0101843000-0.0016702070*I,0.0001825038-0.0016082790*I,0.0000906287+0.0000446434*I,-0.0000020442+0.0000028757*I},
        {0.0015283200-0.0000000000*I,-0.0009821461+0.0036447700*I,-0.0031549480-0.0005174061*I,0.0000835564-0.0007363237*I,0.0000613224+0.0000302072*I,-0.0000020442+0.0000028757*I,-0.0000000492-0.0000000263*I},
    }

    float complex morlet4[7][7] = {
        {-0.0000002623-0.0000000428*I,-0.0000020339-0.0000028530*I,0.0000061847-0.0000236379*I,0.0000950236-0.0000291199*I,0.0001938181+0.0001894189*I,-0.0000723519+0.0004640453*I,-0.0003730507+0.0002492096*I},
        {0.0000138724-0.0000178732*I,0.0001958448+0.0000299994*I,0.0004391283+0.0010866160*I,-0.0020087690+0.0036050660*I,-0.0074747080+0.0020332880*I,-0.0065653990-0.0036563050*I,-0.0009152358-0.0036726160*I},
        {-0.0000014291+0.0007025404*I,-0.0036912840+0.0032713350*I,-0.0180811300-0.0009752251*I,-0.0229593200-0.0254904200*I,0.0042756350-0.0338953400*I,0.0175430200-0.0084178570*I,0.0059336590+0.0043148570*I},
        {-0.0053326850-0.0020938190*I,-0.0081006680-0.0196504100*I,0.0211026300-0.0368138100*I,0.0515590200+0.0000000000*I,0.0211026300+0.0368138100*I,-0.0081006680+0.0196504100*I,-0.0053326850+0.0020938190*I},
        {0.0059336590-0.0043148570*I,0.0175430200+0.0084178570*I,0.0042756350+0.0338953400*I,-0.0229593200+0.0254904200*I,-0.0180811300+0.0009752251*I,-0.0036912840-0.0032713350*I,-0.0000014291-0.0007025404*I},
        {-0.0009152358+0.0036726160*I,-0.0065653990+0.0036563050*I,-0.0074747080-0.0020332880*I,-0.0020087690-0.0036050660*I,0.0004391283-0.0010866160*I,0.0001958448-0.0000299994*I,0.0000138724+0.0000178732*I},
        {-0.0003730507-0.0002492096*I,-0.0000723519-0.0004640453*I,0.0001938181-0.0001894189*I,0.0000950236+0.0000291199*I,0.0000061847+0.0000236379*I,-0.0000020339+0.0000028530*I,-0.0000002623+0.0000000428*I},
    };

    float complex morlet5[7][7] = {
        {0.0000050278-0.0000066992*I,0.0000133504-0.0000177885*I,0.0000239863-0.0000319602*I,0.0000291599-0.0000388537*I,0.0000239863-0.0000319602*I,0.0000133504-0.0000177885*I,0.0000050278-0.0000066992*I},
        {-0.0000830900+0.0004709791*I,-0.0002206299+0.0012505970*I,-0.0003964000+0.0022469160*I,-0.0004818999+0.0027315550*I,-0.0003964000+0.0022469160*I,-0.0002206299+0.0012505970*I,-0.0000830900+0.0004709791*I},
        {-0.0043360960-0.0034702790*I,-0.0115136900-0.0092146750*I,-0.0206863600-0.0165557700*I,-0.0251482100-0.0201267000*I,-0.0206863600-0.0165557700*I,-0.0115136900-0.0092146750*I,-0.0043360960-0.0034702790*I},
        {0.0088283160-0.0000000000*I,0.0234419400-0.0000000000*I,0.0421175400-0.0000000000*I,0.0512019100-0.0000000000*I,0.0421175400+0.0000000000*I,0.0234419400+0.0000000000*I,0.0088283160+0.0000000000*I},
        {-0.0043360960+0.0034702790*I,-0.0115136900+0.0092146750*I,-0.0206863600+0.0165557700*I,-0.0251482100+0.0201267000*I,-0.0206863600+0.0165557700*I,-0.0115136900+0.0092146750*I,-0.0043360960+0.0034702790*I},
        {-0.0000830900-0.0004709791*I,-0.0002206299-0.0012505970*I,-0.0003964000-0.0022469160*I,-0.0004818999-0.0027315550*I,-0.0003964000-0.0022469160*I,-0.0002206299-0.0012505970*I,-0.0000830900-0.0004709791*I},
        {0.0000050278+0.0000066992*I,0.0000133504+0.0000177885*I,0.0000239863+0.0000319602*I,0.0000291599+0.0000388537*I,0.0000239863+0.0000319602*I,0.0000133504+0.0000177885*I,0.0000050278+0.0000066992*I},
    };

    float complex morlet6[7][7] = {
        {-0.0003730507+0.0002492096*I,-0.0000723519+0.0004640453*I,0.0001938181+0.0001894189*I,0.0000950236-0.0000291199*I,0.0000061847-0.0000236379*I,-0.0000020339-0.0000028530*I,-0.0000002623-0.0000000428*I},
        {-0.0009152358-0.0036726160*I,-0.0065653990-0.0036563050*I,-0.0074747080+0.0020332880*I,-0.0020087690+0.0036050660*I,0.0004391283+0.0010866160*I,0.0001958448+0.0000299994*I,0.0000138724-0.0000178732*I},
        {0.0059336590+0.0043148570*I,0.0175430200-0.0084178570*I,0.0042756350-0.0338953400*I,-0.0229593200-0.0254904200*I,-0.0180811300-0.0009752251*I,-0.0036912840+0.0032713350*I,-0.0000014291+0.0007025404*I},
        {-0.0053326850+0.0020938190*I,-0.0081006680+0.0196504100*I,0.0211026300+0.0368138100*I,0.0515590200+0.0000000000*I,0.0211026300-0.0368138100*I,-0.0081006680-0.0196504100*I,-0.0053326850-0.0020938190*I},
        {-0.0000014291-0.0007025404*I,-0.0036912840-0.0032713350*I,-0.0180811300+0.0009752251*I,-0.0229593200+0.0254904200*I,0.0042756350+0.0338953400*I,0.0175430200+0.0084178570*I,0.0059336590-0.0043148570*I},
        {0.0000138724+0.0000178732*I,0.0001958448-0.0000299994*I,0.0004391283-0.0010866160*I,-0.0020087690-0.0036050660*I,-0.0074747080-0.0020332880*I,-0.0065653990+0.0036563050*I,-0.0009152358+0.0036726160*I},
        {-0.0000002623+0.0000000428*I,-0.0000020339+0.0000028530*I,0.0000061847+0.0000236379*I,0.0000950236+0.0000291199*I,0.0001938181-0.0001894189*I,-0.0000723519-0.0004640453*I,-0.0003730507-0.0002492096*I},
    };

    float complex morlet7[7][7] = {
        {0.0015283200-0.0000000000*I,-0.0009821461-0.0036447700*I,-0.0031549480+0.0005174061*I,0.0000835564+0.0007363237*I,0.0000613224-0.0000302072*I,-0.0000020442-0.0000028757*I,-0.0000000492+0.0000000263*I},
        {-0.0009821461+0.0036447700*I,0.0107757100-0.0000000000*I,-0.0046855570-0.0173882200*I,-0.0101843000+0.0016702070*I,0.0001825038+0.0016082790*I,0.0000906287-0.0000446434*I,-0.0000020442-0.0000028757*I},
        {-0.0031549480-0.0005174061*I,-0.0046855570+0.0173882200*I,0.0347844100-0.0000000000*I,-0.0102342000-0.0379793800*I,-0.0150514100+0.0024684060*I,0.0001825038+0.0016082790*I,0.0000613224-0.0000302072*I},
        {0.0000835564-0.0007363237*I,-0.0101843000-0.0016702070*I,-0.0102342000+0.0379793800*I,0.0514080300-0.0000000000*I,-0.0102342000-0.0379793800*I,-0.0101843000+0.0016702070*I,0.0000835564+0.0007363237*I},
        {0.0000613224+0.0000302072*I,0.0001825038-0.0016082790*I,-0.0150514100-0.0024684060*I,-0.0102342000+0.0379793800*I,0.0347844100+0.0000000000*I,-0.0046855570-0.0173882200*I,-0.0031549480+0.0005174061*I},
        {-0.0000020442+0.0000028757*I,0.0000906287+0.0000446434*I,0.0001825038-0.0016082790*I,-0.0101843000-0.0016702070*I,-0.0046855570+0.0173882200*I,0.0107757100+0.0000000000*I,-0.0009821461-0.0036447700*I},
        {-0.0000000492-0.0000000263*I,-0.0000020442+0.0000028757*I,0.0000613224+0.0000302072*I,0.0000835564-0.0007363237*I,-0.0031549480-0.0005174061*I,-0.0009821461+0.0036447700*I,0.0015283200+0.0000000000*I},
    };

    float complex morlet8[7][7] = {
        {-0.0003730507-0.0002492096*I,-0.0009152358+0.0036726160*I,0.0059336590-0.0043148570*I,-0.0053326850-0.0020938190*I,-0.0000014291+0.0007025404*I,0.0000138724-0.0000178732*I,-0.0000002623-0.0000000428*I},
        {-0.0000723519-0.0004640453*I,-0.0065653990+0.0036563050*I,0.0175430200+0.0084178570*I,-0.0081006680-0.0196504100*I,-0.0036912840+0.0032713350*I,0.0001958448+0.0000299994*I,-0.0000020339-0.0000028530*I},
        {0.0001938181-0.0001894189*I,-0.0074747080-0.0020332880*I,0.0042756350+0.0338953400*I,0.0211026300-0.0368138100*I,-0.0180811300-0.0009752251*I,0.0004391283+0.0010866160*I,0.0000061847-0.0000236379*I},
        {0.0000950236+0.0000291199*I,-0.0020087690-0.0036050660*I,-0.0229593200+0.0254904200*I,0.0515590200-0.0000000000*I,-0.0229593200-0.0254904200*I,-0.0020087690+0.0036050660*I,0.0000950236-0.0000291199*I},
        {0.0000061847+0.0000236379*I,0.0004391283-0.0010866160*I,-0.0180811300+0.0009752251*I,0.0211026300+0.0368138100*I,0.0042756350-0.0338953400*I,-0.0074747080+0.0020332880*I,0.0001938181+0.0001894189*I},
        {-0.0000020339+0.0000028530*I,0.0001958448-0.0000299994*I,-0.0036912840-0.0032713350*I,-0.0081006680+0.0196504100*I,0.0175430200-0.0084178570*I,-0.0065653990-0.0036563050*I,-0.0000723519+0.0004640453*I},
        {-0.0000002623+0.0000000428*I,0.0000138724+0.0000178732*I,-0.0000014291-0.0007025404*I,-0.0053326850+0.0020938190*I,0.0059336590+0.0043148570*I,-0.0009152358-0.0036726160*I,-0.0003730507+0.0002492096*I},
    };
    */

    // ===================== READ PARAMETERS ======================
    char *filename = strdup(DEFAULT_FILENAME);
    if (argc > 1) {
        filename = strdup(argv[1]);
        fprintf(stderr, "file %s\n", filename);
    }

    // Read image
    int xsize, ysize, maxval;
    unsigned int *image = read_ppm(filename, xsize, ysize, maxval);

    // ==================== GPU IMPLEMENTATION ====================
    int yround = ysize;
    int xround = xsize;

    int ythreads = 32;
    int xthreads = 32;
    int ymult = ythreads-6;
    int xmult = xthreads-6;

    // For simplicity, have exactly the number of blocks and threads needed
    if (yround % ymult) {
        yround = yround/ymult*ymult + ymult;
    }
    if (xround % xmult) {
        xround = xround/xmult*xmult + xmult;
    }
    int yblocks = yround / ymult;
    int xblocks = xround / xmult;

    dim3 blocks(xblocks, yblocks);
    dim3 threads(xthreads, ythreads);

    // Allocate memory
    int bytes = ysize*xsize*sizeof(int);
    int numbytes =  xsize*ysize*3*sizeof(int);
    int padded_bytes = yround*xround*sizeof(int);

    unsigned int *dImage;
    int *dResult;
    cudaMalloc((unsigned int**) &dImage, padded_bytes);
    cudaMalloc((int**) &dResult, numbytes);

    cudaMemcpy(dImage, image, bytes, cudaMemcpyHostToDevice);
    cudaMemset(dResult, 0, numbytes);

    // Time the kernel
    float elapsed_time;
    cudaEvent_t start, stop;
    cudaEventCreate(&start);
    cudaEventCreate(&stop);
    cudaEventRecord(start, 0);

    conv<<<blocks, threads>>>(dImage, dResult, xsize);

    cudaDeviceSynchronize();
    cudaEventRecord(stop);
    cudaEventSynchronize(stop);
    cudaEventElapsedTime(&elapsed_time, start, stop);
    fprintf(stderr, "%4.4f\n", elapsed_time);

    // Copy the result
    int *result = (int*) memCheck(malloc(numbytes));
    cudaMemcpy(result, dResult, numbytes, cudaMemcpyDeviceToHost);

    // Write the ppm file
    write_ppm("result.ppm", xsize, ysize, 255, result);

    // Free memory
    cudaFree(dImage);
    cudaFree(dResult);
    free(image);
    free(result);
}

